import numpy as np
import pandas as pd
import sympy


class FED_XGB:
    def __init__(self, base_score=0.5, max_depth=5, n_estimators=10, learning_rate=0.1, reg_lambda=1.,
                 gamma=0., min_child_sample=None, min_child_weight=1., objective='linear'):
        self.base_score = base_score  # 最开始时给叶子节点权重所赋的值，默认0.5，迭代次数够多的话，结果对这个初值不敏感
        self.max_depth = max_depth  # 最大数深度，3
        self.n_estimators = n_estimators  # 树的个数，10
        self.rate = learning_rate  # 学习率，别和梯度下降里的学习率搞混了，这里是每棵树要乘以的权重系数，0.1
        self.reg_lambda = reg_lambda  # L2正则项的权重系数
        self.gamma = gamma  # 正则项中，叶子节点数T的权重系数
        self.min_child_sample = min_child_sample  # 每个叶子节点的样本数（自己加的）
        self.min_child_weight = min_child_weight  # 每个叶子节点的Hessian矩阵和，下面代码会细讲
        self.objective = objective  # 目标函数
        self.tree_structure = {}  # 用一个字典来存储每一颗树的树结构
        self.epsilon = 0.01  # 树生长最小增益
        self.loss = lambda y, y_hat: (y - y_hat) ** 2. / 2.  # 损失函数

    def xgb_cart_tree(self, X, w, dep):
        """
        递归构造XCart树
        @param X:
        @param w:
        @param dep:
        @return:
        """
        X = X.reset_index(drop='True')
        best_var, best_cut = None, None
        max_gain = 0.  # 这里增益的初值一定要设置为0，相当于对树做剪枝，即如果算出的增益小于0则不做分裂
        G_left_best, G_right_best, H_left_best, H_right_best = 0., 0., 0., 0.
        # 遍历每个变量的每个切点，寻找分裂增益gain最大的切点并记录下来
        for item in [x for x in X.columns if x not in ['g', 'h', 'y']]:
            for cut in X[item]:
                if self.min_child_sample:  # 这里如果指定了min_child_sample则限制分裂后叶子节点的样本数都不能小于指定值
                    if (X.loc[X[item] < cut].shape[0] < self.min_child_sample) \
                            | (X.loc[X[item] >= cut].shape[0] < self.min_child_sample):
                        continue
                list_L = X.loc[X[item] < cut].index.tolist()
                list_R = X.loc[X[item] >= cut].index.tolist()
                G_left = w[list_L].sum() - X.loc[list_L, 'g'].sum()
                G_right = w[list_R].sum() - X.loc[list_R, 'g'].sum()
                H_left = len(list_L)
                H_right = len(list_R)
                """!待完善：根据损失函数计算"""
                # min_child_weight指每个叶子节点上的H，即目标函数二阶导的加和
                if self.min_child_weight and ((H_left < self.min_child_weight) or (H_right < self.min_child_weight)):
                    continue
                gain = G_left ** 2. / (H_left + self.reg_lambda) + G_right ** 2. / (H_right + self.reg_lambda)
                gain = gain - (G_left + G_right) ** 2. / (H_left + H_right + self.reg_lambda)
                gain = gain / 2. - self.gamma
                if gain > 0.:
                    if gain > max_gain:
                        best_var, best_cut = item, cut
                        max_gain = gain
                        G_left_best, G_right_best, H_left_best, H_right_best = G_left, G_right, H_left, H_right
        # 如果遍历完找不到可分列的点，或达到最大深度，或最大增益小于指定值，则返回None。否则递归生成树结构的字典，保存在self.tree_structure中
        if best_var is None or dep > self.max_depth or max_gain <= self.epsilon:
            return None
        else:
            id_left = X.loc[X[best_var] < best_cut].index.tolist()
            w_left = - G_left_best / (H_left_best + self.reg_lambda)
            id_right = X.loc[X[best_var] >= best_cut].index.tolist()
            w_right = - G_right_best / (H_right_best + self.reg_lambda)
            w[id_left] = w_left
            w[id_right] = w_right
            self.tree_structure[(best_var, best_cut)] = {}
            self.tree_structure[(best_var, best_cut)][('left', w_left)] = self.xgb_cart_tree(X.loc[id_left], w, dep + 1)
            self.tree_structure[(best_var, best_cut)][('right', w_right)] = self.xgb_cart_tree(X.loc[id_right], w,
                                                                                               dep + 1)
            return self.tree_structure

    def fit(self, X, Y, gi, hi, r):
        """
        根据训练数据集X和标签集Y训练出树结构和权重
        :param X:训练数据集X
        :param Y:标签集
        :param gi:首轮更新一阶导函数
        :param hi:首轮二阶导
        :param r:轮
        :return:树结构字典
        """
        if X.shape[0] != Y.shape[0]:
            raise ValueError('X and Y must have the same length!')
        X = X.reset_index(drop=True)
        Y = Y.values
        # 这里根据base_score参数设定权重初始值
        y_hat = pd.Series([self.base_score] * Y.shape[0])
        for t in range(self.n_estimators):
            print(f'fitting tree {t + 1}.')
            if r == 0:
                X['g'] = self.diff(y_hat, Y)[0]
                X['h'] = self.diff(y_hat, Y)[1]
            else:
                X['g'] = gi
                X['h'] = hi
            f_t = pd.Series([0.] * Y.shape[0])
            self.tree_structure[t + 1] = self.xgb_cart_tree(X, f_t, 0)
            y_hat = y_hat + self.rate * f_t
            # python中函数传参时传的是引用，所以这里f_t作为参数调用了xbg_cart_tree后其本身也得到更新
            print(f'tree {t + 1} fitted.')
        print('All fitted.')
        return self.tree_structure

    def _get_tree_node_w(self, X, tree, w):
        """
        递归解构树结构，更新w为节点值
        @param X:
        @param tree:
        @param w:
        @return:
        """
        if tree is not None:
            k = list(tree.keys())[0]
            var, cut = k[0], k[1]
            X_left = X.loc[X[var] < cut]
            id_left = X_left.index.tolist()
            X_right = X.loc[X[var] >= cut]
            id_right = X_right.index.tolist()
            '''
            for kk in tree[k].keys():
                if kk[0] == 'left':
                    tree_left = tree[k][kk]
                    w[id_left] = kk[1]
                elif kk[0] == 'right':
                    tree_right = tree[k][kk]
                    w[id_right] = kk[1]
                和下面的代码等价，节省计算资源
            '''
            kk = tree[k].keys()
            tree_left = tree[k][kk[0]]
            w[id_left] = kk[0][1]
            tree_right = tree[k][kk[1]]
            w[id_right] = kk[1][1]
            self._get_tree_node_w(X_left, tree_left, w)
            self._get_tree_node_w(X_right, tree_right, w)
        return

    def predict_raw(self, X):
        """
        根据训练结果预测返回原始预测值。迭代后y_t为前n-1棵树的y_hat，加和后返回n棵树的y_hat，Y
        @param X:
        @return:
        """
        l_tree = list(self.tree_structure.items())
        X = X.reset_index(drop=True)
        Y = pd.Series([self.base_score] * X.shape[0])
        for t in range(self.n_estimators):
            tree = dict([l_tree[t]])
            y_t = pd.Series([0.] * X.shape[0])
            self._get_tree_node_w(X, tree, y_t)
            Y = Y + self.rate * y_t
        return Y

    def _grad(self, y_hat, Y):
        """
        计算目标函数的一阶导
        支持linear和logistic
        @param y_hat:
        @param Y:
        @return:
        """
        if self.objective == 'logistic':
            y_hat = 1.0 / (1.0 + np.exp(-y_hat))
            return y_hat - Y
        elif self.objective == 'linear':
            return y_hat - Y
        else:
            raise KeyError('temporarily: use linear or logistic')

    def _hess(self, y_hat, Y):
        """
        计算目标函数的二阶导，支持linear和logistic
        @param y_hat:
        @param Y:
        @return:
        """
        if self.objective == 'logistic':
            y_hat = 1.0 / (1.0 + np.exp(-y_hat))
            return y_hat * (1.0 - y_hat)
        elif self.objective == 'linear':
            return np.array([1.] * Y.shape[0])
        else:
            raise KeyError('temporarily: use linear or logistic')

    def find_G_H(self, y, y_hat, list_L_R):
        """
        求G、H
        :param y:标签值
        :param y_hat:预测值
        :param list_L_R:索引列表
        :return:求得G、H
        """
        if self.loss == 'linear':
            G = y_hat[list_L_R].sum() - y[list_L_R].sum()
            H = len(list_L_R)
        elif self.loss == 'logistic':
            pass  # 待后续补充
        else:
            pass
        return G, H

    def diff(self, y_hat, y):
        """
        求导。linear和logistic直接计算，节省时间
        :param y: y
        :param y_hat:y_hat
        :return: 导函数的符号表达式
        """
        m = sympy.Symbol('m')
        n = sympy.Symbol('n')
        fun = self.loss(m, n)
        d1f = sympy.diff(fun, 'n')
        d2f = sympy.diff(fun, 'n', 2)
        g = []
        h = []
        for i in range(len(y)):
            g.append(d1f.subs(m, y[i]).subs(n, y_hat[i]))
            h.append(d2f.subs(m, y[i]).subs(n, y_hat[i]))  # 可以优化，避免for循环直接对y和y_hat全部带入导数求值
        return g, h
